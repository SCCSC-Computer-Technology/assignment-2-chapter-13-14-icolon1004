Code Structure and Readability
Method Organization: Your methods are well-organized and focused on specific tasks, which enhances readability and maintainability.
Naming Conventions: The method and variable names are clear and descriptive, making the code easy to understand.
Comments: The code contains a mix of auto-generated and TODO comments. It would be beneficial to add more descriptive comments explaining the purpose of each method and any complex logic.
That being said you dont really need commints of your vars are named well, and yours are.  and in the real world they like to stay away from comments if you dont need them.  and you dont
Documentation
Lack of XML Documentation: Methods lack XML documentation comments. Adding summary comments to public methods would enhance the code's readability and maintainability, especially when working in teams.
Functionality
LINQ Queries: The use of LINQ for data manipulation is efficient and makes the code more readable. The queries are straightforward and seem to fulfill their intended purpose.
Error Handling: The try-catch blocks in methods like greaterthanTextBox_Click provide basic error handling, which is good. However, the error messages could be more descriptive to guide the user better.
Efficiency and Code Reusability
Repeated Code: The methods GreaterThanUnitsOnHand and LesserThanUnitsOnHand have similar structures. Consider combining them into a single method with an additional parameter to specify the comparison type (greater than or less than).
Data Validation: Before parsing user input with int.Parse and decimal.Parse, it's good practice to validate the input to avoid exceptions. int.TryParse and decimal.TryParse would be safer alternatives.
Specific Observations
User Input Handling: The code directly uses Text from textboxes in business logic. Consider validating and sanitizing these inputs before using them in queries.
Clear Button Functionality: The clearButton_Click method clears textboxes but also seems to reset the sorting of products. The method's name does not clearly indicate this behavior, which might be confusing.
Data Binding: The code efficiently binds LINQ query results to the DataGridView. However, consider checking if the data source needs to be refreshed or updated elsewhere in the application.
Conclusion
Your code demonstrates a good understanding of Windows Forms, LINQ, and basic C# conventions. There is a clear structure and separation of concerns, which is commendable. Improvements can be made in the areas of input validation, error messaging, and reducing code duplication.

Incorporating these changes will make your application more robust, user-friendly, and maintainable. Keep up the good work, and continue to focus on writing clean, efficient, and well-documented code!